# make app headers available
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

#Instruct CMake to run meta object compiler automatically when needed
# Needed for Qt Windows???
set(CMAKE_AUTOMOC ON)

# list here all source files appart from main
set(source_files
    cli/cli_controller.cpp
    cli/cli_options.cpp
    controller.cpp
    pipeline/matlab_reader.cpp
    pipeline/matlab_reader_concurrent.cpp
    pipeline/pipeline.cpp
    pipeline/pipeline_observer.cpp
    pipeline/pipeline_factory.cpp
    pipeline/pipeline_timer.cpp
    pipeline/pipeline_writer.cpp
    )

# list here all source files related with the gui
set(gui_source_files
   gui/qt_controller.cpp
   gui/main_window.cpp
   gui/gui_ref_img_view.cpp
   )

# list here all source files related with reading ros bag files
set(rosbag_source_files
    pipeline/ros_bag_reader.cpp
    )

# list here your testing files (*.test.cc) of your module
set(test_files
    test_root.cc
    pipeline/matlab_reader.test.cc
    )

# find and import dependencies

find_package( Eigen3 REQUIRED )
include_directories(${EIGEN3_INCLUDE_DIR})
message("Eigen: " ${EIGEN3_VERSION})

find_package( Boost COMPONENTS
    system
    filesystem
    program_options
    log
    unit_test_framework
    REQUIRED )

ADD_DEFINITIONS(-DBOOST_LOG_DYN_LINK)
message("Boost version: " ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}  " (" ${Boost_VERSION} ")")

if(ENABLE_GUI)
  find_package(Qt5Core)

  # Find the QtWidgets library
  find_package(Qt5Widgets)
  set(GUI_LIBRARIES
    Qt5::Widgets
    )
  add_definitions(-DENABLE_GUI)
  message("Qt5::Widgets: " ${Qt5Widgets_VERSION})
else(ENABLE_GUI)
    # reset gui sources
    set(gui_source_files "")
endif(ENABLE_GUI)

if(ENABLE_ROSBAG)
    find_package(rosbag REQUIRED)
    find_package(sensor_msgs REQUIRED)
    include_directories(${rosbag_INCLUDE_DIRS} ${sensor_msgs_INCLUDE_DIRS})
    set(ROSBAG_LIBRARIES ${rosbag_LIBRARIES} ${sensor_msgs_LIBRARIES})

    # at the moment only used for ROS bag extraction
    find_package( yaml-cpp REQUIRED )
    include_directories(${YAML_CPP_INCLUDE_DIR})

    add_definitions(-DENABLE_ROSBAG)
else(ENABLE_ROSBAG)
    # reset rosbag sources
    set(rosbag_source_files "")
endif(ENABLE_ROSBAG)

# compile everything into a library and then link into the target executable (tests, main, etc.)
# this should increase compilation speed
add_library(libmousetrackAll ${source_files} ${rosbag_source_files})

# link all dependencies
target_link_libraries(libmousetrackAll
    libmousetrack
    ${Boost_SYSTEM_LIBRARY}
    ${Boost_FILESYSTEM_LIBRARY}
    ${Boost_PROGRAM_OPTIONS_LIBRARY}
    ${Boost_LOG_LIBRARY}
    ${CMAKE_THREAD_LIBS_INIT}
    ${ROSBAG_LIBRARIES}
    ${YAML_CPP_LIBRARIES}
)

# create the mousetrack executable
add_executable(mousetrack mousetrack/main.cpp ${gui_source_files})
target_link_libraries(mousetrack
    libmousetrackAll
    ${GUI_LIBRARIES}
    )

# create unit test executable
add_executable(appTests ${test_files})
target_link_libraries(appTests
    libmousetrackAll
    ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
    )


# create a target for the headers, we don't actually need the result
# but this way, IDE's also show header files in their project overviews
file(GLOB_RECURSE appHeader_files "*.h")
add_custom_target(appHeaders SOURCES ${appHeader_files})
